[

{
"id": "-practice-2019-02-04-control_structures_ii",
"title": "Control structures (P)",
"author": null,
"tags": [],
"url": "/practice/2019/02/04/control_structures_ii/",
"date": "2019-02-04",
"content": ""
}, 

{
"id": "-theory-2019-01-28-control_structures_i",
"title": "Control structures (T)",
"author": null,
"tags": [],
"url": "/theory/2019/01/28/control_structures_i/",
"date": "2019-01-28",
"content": ""
}, 

{
"id": "-practice-2019-01-21-input_output_ii",
"title": "Input/Output (P)",
"author": null,
"tags": [],
"url": "/practice/2019/01/21/input_output_ii/",
"date": "2019-01-21",
"content": ""
}, 

{
"id": "-theory-2019-01-21-input_output_i",
"title": "Input/Output (T)",
"author": null,
"tags": [],
"url": "/theory/2019/01/21/input_output_i/",
"date": "2019-01-21",
"content": ""
}, 

{
"id": "-practice-2019-01-14-basic_ii",
"title": "Basic elements of C++ (P)",
"author": null,
"tags": ["data", "iostream"],
"url": "/practice/2019/01/14/basic_ii/",
"date": "2019-01-14",
"content": ""
}, 

{
"id": "-theory-2019-01-07-basic_i",
"title": "Basic elements of C++ (T)",
"author": null,
"tags": ["data", "iostream"],
"url": "/theory/2019/01/07/basic_i/",
"date": "2019-01-07",
"content": "En este capítulo,  Te harás familiar con los componentes básicos de un programa en C++, incluyendo funciones, símbolos especiales e identificadores.  Explorarás tipos de datos simples  Descubrirás cómo usar las operaciones aritméticas  Examinarás cóom un programa evalúa las expresiones aritméticas  Te harás familiar con el tipo de dato string  Aprenderás qué es una declaración de asignación y qué es lo que hace.  Aprenderás sobre la declaración de variables  Descubrirás cómo ingresar los datos en la memoria usando las declaraciones de ingreso  Te harás familiar con el uso de operaciones de incremento y decremento  Examinarás formas de resultados de salida usando declaraciones de salida.  Aprenderás cómo usar las directivas de preprocesador y porqué son necesarios  Aprenderás a depurar errores de sintáxis  Explorarás cómo estructura un programa apropiadamente, incluyendo usando comentarios para documentar un programa.  Te harás familiar con las declaraciones compuestas  Aprenderás cómo escribir un programa en C++En este capítulo aprenderás lo básico de C++. Como tu objetivo es aprender el lenguaje de programación C++, dos preguntas surgen naturalmente. Primero, ¿qué es un programa de computadora? Segundo, ¿qué es la programación? Un programa de computadora, o un programa, es una secuencia de enunciados cuyo objetivo es cumplir una tarea. La programación es un proceso de planificación y creación de un programa. Estas dos definiciones dicen la verdad, pero no toda la verdad, acerca de la programación. Es muy posible que se necesite de un libro completo para dar una definición satisfactoria de la programación. Puede obtener una mayor comprensión de la naturaleza de la programación a partir de una analogía, por lo que pasemos a un tema sobre el que casi todo el mundo tiene algún conocimiento – cocinar–. Una recta es también un programa, y todos los que tengan alguna experiencia en la cocina puede ponerse de acuerdo sobre lo siguiente:  En general, es más fácil seguir una receta que crear una.  Hay buenas rectas y hay malas recetas.  Algunas recetas son fáciles de seguir y otras no son fáciles de seguir.  Algunas recetas producen resultados confiables y otras no.  Debe tener algún conocimiento de cómo usar las herramientas de cocina para seguir una receta hasta completarla.  Para crear buenas recetas nuevas, debe tener muchos conocimientos y una buena comprensión de la cocina.Estos mismos seis puntos también son ciertos sobre la programación. Tomemos un paso más la analogía de la cocina. Supongamos que necesitas enseñarle a alguien cómo convertirse en chef. ¿Cómo lo harías? ¿Primero le presentarías a la persona una buena comida, esperando que desarrolle el gusto por la buena comida? ¿Le pediría a la persona que siguiera recta tras receta con la esperanza que algo de eso se borre? ¿O primero le enseñaría el uso de las herramientas y la naturaleza de los ingredientes, los alimentos y las especias, y explicaría cómo encajan? Al igual que hay desacuerdo sobre cómo enseñar programación. Aprender un lenguaje de programación es como aprender a ser chef o aprender a aprender tocar un instrumento musical. Los tres requieren interacción directa con las herramientas. No puedes convertirte en un buen chef solo leyendo recetas. Del mismo modo, no puede convertise en un músico leyendo libros sobre instrumentos musicales. Lo mismo ocurre con la programación. Debe tener un conocimiento fundamental del idioma y debe probar sus programas en la computadora para asegurarse de que cada programa haga lo que se supone que debe hacer.Una mirada rápida a un programa en C++En este capítulo, aprenderás los elementos básicos y conceptos del lenguaje de programación C++ para crear programas en C++. Además de dar ejemplos para ilustrar varios conceptos, también mostramos programas en C++ para clarificar estos conceptos. En esta sección, proveemos un ejemplode un programa en C++ que calcula el perímetro y el área de un rectángulo. En este punto, no debe preocuparse demasiado por los detalles de este programa. Solo neceista conocer el efecto de una declaración de salida, que se introduce en este programa.En el ejemplo 1-1 (Capítulo 1), diseñamos un algoritmo para encontrar el perímetro y el área de un rectángulo. Dado el largo y el ancho de un rectángulo. Dado el largo y el ancho de un rectángulo, el programa en C++, en el ejemplo 2-1 calcula y muestra el perímetro y el área.#include &lt;iostream&gt;using namespace std;int main(){\tdouble length;\tdouble width;\tdouble area;\tdouble perimeter;\tcout &lt;&lt; \"Program to compute and output the perimeter and\"\t\t\t &lt;&lt; \"area of a rectangle.\" &lt;&lt; endl;\tlength = 6.0;\twidth = 4.0;\tperimeter = 2 * (length + width);\tarea = length * width;\tcout &lt;&lt; \"Length = \" &lt;&lt; length &lt;&lt; endl;\tcout &lt;&lt; \"Width = \" &lt;&lt; width &lt;&lt; endl;\tcout &lt;&lt; \"Area = \" &lt;&lt; area &lt;&lt; endl;\treturn 0;}Ejecución de muestra: (Cuando compilas y ejecuta este programa, las siguientes cinco líneas son mostradas en la pantalla.)Programa to compute and output the perimeter and area of a rectangle.Length = 6Width = 4Perimeter = 20Area = 24Estas líneas son mostradas por la ejecución de las siguientes declaraciones:cout &lt;&lt; \"Program to compute and output the perimeter and \"\t\t &lt;&lt; \"area of a rectangle.\" &lt;&lt; endl;cout &lt;&lt; \"Length = \" &lt;&lt; length &lt;&lt; endl;cout &lt;&lt; \"Width = \" &lt;&lt; width &lt;&lt; endl;cout &lt;&lt; \"Perimeter = \" &lt;&lt; perimeter &lt;&lt; endl;cout &lt;&lt; \"Area = \" &lt;&lt; area &lt;&lt; endl;Luego explicaremos cómo esto ocurre. Consideremos primero la siguiente declaración:cout &lt;&lt; \"Program to compute and output the perimeter and \"\t\t &lt;&lt; \"area of a rectangle.\" &lt;&lt; endl;Este es un ejemplo de declaración de salida en C++. Hace que la computadora evalúe la expresión después del par de símbolos &lt;&lt; y muestre el resultado en la pantalla. Un programa en C++ puede contener varios tipos de expresiones como aritmética o cadenas.Por ejemplo, length + width es una expresión aritmética. Cualquier cosa entre comillas dobles es una cadena. Por ejemplo, Program to comoute and output the perimeter and  es una cadena. Del mismo modo, area of a rectangle es también una cadena. Normalmente, una cadena se evalúa a sí misma. Las expresiones aritméticas se evalúan de acuerdo a las reglas de las operaciones aritméticas que normalmente se aprende en un curso de aritmética. Más adelante en este capítulo, explicaremos cómo se forman y evalúan las expresiones aritméticas y las cadenas. También tenga en cuenta que en una declaración de salida, endl hace que el punto de inserción se mueva al principio de la línea siguiete. (Tenga en cuenta que endl, la última letra es ele minúscula. También, en la pantalla, el punto de inserción es donde está el cursor.) Por lo tanto, la declaración anterior hace que el sistema muestra la siguiente línea en la pantalla.Program to compute and output the area and perimeter of a rectangle.Ahora consideremos la siguiente declaración:cout &lt;&lt; \"Length = \" &lt;&lt; length &lt;&lt; endl;Esta declaración de salida consta de dos expresiones. La primera expresión, (después del primer &lt;&lt;), es Length =  y la segunda expresión, (después del segundo &lt;&lt;), consta del identificador length. La expresión \"Length= \" es una cadena y evalúa a sí misma. (Note el espacio después de =.) La segunda expresión, que consta del identificador length, se evalúa como cualquiera que sea el valor de length es. Porque el valor asignado a length es 6.0. Por lo tanto, la salida de la declaraación anterior es:Length = 6Note que el valor de length se muestra como 6, no como 6.0. Lo explicaremos en el siguiente capítulo cómo forzar al programa a generar el valor de length como 6.0. El significado de las declaraciones de salida restantes es similar.La última declaración, es decir, return 0; devuelve el valor 0 al sistema operativo cuando el programa termina. Daremos más detalles sobre esta declaración más adelante en este capítulo. Antes de identificar varias partes de un programa en C++, echemos un vistazo a una declaración más de salida. Considere la siguiente declaración:cout &lt;&lt; \"7 + 8 = \" &lt;&lt; 7 + 8 &lt;&lt; endl;En esta declaración de salida, la expresión \"7 + 8 = \", que es una cadena, se evalúa a sí misma. Consideremos la segunda expresión, 7 + 8. Esta expresión consiste de números 7 y 8, y la operador aritmética + de C++. Por lo tanto, el resultado de la expresión 7 + 8 es la suma de 7 y 8, que es 15. Así, la salida de la declaración anterior es:7 + 8 = 15En este capítulo, hasta que expliquemos cómo construir correctamente un programa en C++, estaremos utilizando declaraciones de salida como las anteriores para explicar varios conceptos. Después al finalizar el Capítulo 2, deberías poder escribir programas en C++ lo suficientemente bien como para hacer algunos cálculos y mostrar los resultados. A continuación, notemos lo siguiente sobre el programa anterior en C++. Un programa en C++ es una colección de funciones, una de las cuales es la función principal. En términos generales, una función es un conjunto de afirmaciones cuyo objetivo es lograr algo. El programa anterior se compone de la única función principal; todos los programas de C++ requieren de una función principal.Las primeras cuatro líneas de un programa empieza con el par de símbolos // (se muestra en verde), que son comentarios. Los comentarios son para el usuario, normalmente explican el propósito de los programas, es decir, el significado de las declaraciones. (Vamos a detallar cómo incluir comentarios en un programa más adelante en este capítulo). La siguient línea del programa, es decir,#include &lt;iostream&gt;nos permite usar el (objeto predefinido) cout para generar saluda y el (manipulador) endl. La declaraciónusing namespace std;le permite usar el cout y el endl sin el prefijo std::. Esto significa que si no incluye esta declaración, entonces cout debería ser usado como std::cout y endl debería ser usado como `std::endl.  Elaboraremos esto al final de este capítulo.Ahora consideremos la siguiente línea:int main()Esta es la cabezera de la función main. La siguiente línea consiste de una llave izquierda. Esto marca el inicio del (cuerpo) de la función main. La llave derecha (al final de última línea del programa) coincide con esta llave izquierda y marca el fin del cuerpo de la función main. Explicaremos el significado de los otros términos, tales como aquellos mostrados en azul, después en este libro. Note que en C++, &lt;&lt; es un operador llamado el stream insertion operator.Antes de finalizar esta sección, permítanos identificar cietas partes de un programa en C++ en la Figura 2-1.//*************************************************************// Given the length and width of a rectangle, this C++ program// computes and outputs the perimeter and area of the rectangle.//*************************************************************#include &lt;iostream&gt;using namespace std;int main(){\tdouble length;\tdobule width;\tdouble area;\tdouble perimeter;\tcout &lt;&lt; \"Program to compute and output the perimeter and \"\t\t\t &lt;&lt; \"area of a rectangle.\" &lt;&lt; endl;\tlength = 6.0;\twidth = 4.0;\tperimeter = 2 * (length + width);\tarea = length * width;\tcout &lt;&lt; \"Length = \" &lt;&lt; length &lt;&lt; endl;\tcout &lt;&lt; \"Width = \" &lt;&lt; width &lt;&lt; endl;\tcout &lt;&lt; \"Perimter = \" &lt;&lt; perimeter &lt;&lt; endl;\tcout &lt;&lt; \"Area = \" &lt;&lt; area &lt;&lt; endl;\treturn 0;}Uno de los términos que encontrarás a lo largo del texto y que es también identificado en la Figura 2-1 es una variable. Por lo tanto, introducimos este término en esta sección. Recordemos del Capítulo 1 que todos los datos deben ser cargados en la memoria principal antes que puedan ser manipulados. Por ejemplo, dado la longitud y el ancho, el programa en la Figura 2-1 calcula y muestra el área y el perímetro de un rectángulo. Esto significa que el valor de la longitud y el ancho debe ser guardado en la memoria principal. También, recordemos del Capítulo 1 que la memoria principal es una secuencia ordenada de celdas y cada celda tiene una dirección. Dentro de la computadora, la dirección de memoria está en binario. Una vez que almacenamos el valor de la longitud y el ancho, y porque estos valores podrían ser necesitados en más de un lugar en un program, nos gustaría conocer cómo las ubicaciones donde estos valores on guardados y cómo acceder a estas ubicaciones. C++ hace esto facil para un programador al especificar estas ubicaciones porque el programador puede otorgar un nombre alfabético para cada una de estas ubicaciones. Por supuesto, debemos seguir las reglas para especificar los nombres. Por ejemplo, en el programa en la Figura 2-1, le decimos al sistema que almacene cuatro espacios de memoria y los nombre ``length, width, area y perimter, respectivamente. (Explicaremos el significado de la palabra double, mostrado en azul luego en este capítulo.) Esencialmente, una variable es la ubicación de memoria cuyo contenido puede cambiar. Así length, width, area y perimeter son variables. También durante la ejecución de un programa, el sistema almacenará cuatro ubicaciones de memoria lo suficientemente grande para almacenar números decimales y estas ubicaciones de memoria son llamados length, width, area y perimeter, respectivamente. (vea Figura 2-2).La declaración length = 6.0; llamará al sistema para almacenar 6.0 en la ubicación de memoria asociado con el nombre (o identificado por el nombre) length, vea Figura 2-3.Ejemplo 2-14 y 2-19 adelante ilustran cómo el dato es manipulado en variables.Como procedimos a lo largo del capítulo, explicaremos el significado de las partes restantes identificadas en la Figura 2-1.Lo básico de un programa en C++En la sección anterior, dimos un ejemplo de un programa en C++ y también identificamos ciertas partes del programa. En general, un programa en C++ es una colección de uno o más subprogramas, llamadas funciones. Toscamente hablando, un subprograma o una función es una colección de declaraciones, y cuando este es activada, o ejectuada, esto cumple algo. Algunas funciones, llamadas predefinidas o funciones estándar, ya están escritas y son provistas como parte del sistema. Pero para cumplir muchas tareas, los programadores deben aprender a escribir sus propias funcionesCualquier programa en C++ tiene una funcion principal. Así, si un programa en C++ tiene una sola función, este debe ser la función main. Hasta el Capítulo 6, otros que usan algunas funciones predefinidas, principalmente tratarás con la función main. Al final de este capítulo, habrás aprendido cómo escribir programas que consisten solo de la función main.Si nunca has visto un programa escrito en un lenguaje de programación, el programa en C++ en el ejemplo 2-1 podría paracer un lenguaje extranjero. Para hacer las oraciones significantes en un lenguaje extraño, debes aprender su alfabeto, palabras y su gramática. Lo mismo es cierto para un lenguaje de programación. Para escribir programas significantes, debes aprender los símbolos especiales, palabras y reglas de sintáxis. Las reglas de sintaxis te dicen cuáles declaraciones (instrucciones) son legales o válidas, esto es, cuáles son aceptadas por el lenguaje de programación y cuáles no. Debes también aprender las reglas de semántica, que determinan el significado de las instrucciones. Las reglas del lenguaje de programación, los símbolos y las palabras especiales del lenguaje de programación le permite escribir programas para resolver problemas.Lenguaje de programación: Un conjunto de reglas, símbolos y palabras especiales.En el resto de esta sección, aprenderá sobre algunos de los símbolos especiales de un programa en C++. Se introducen símbolos especiales adicionales a medida que se encuentran otros conceptos en capítulos posteriores. De manera similar, las reglas de sintaxis y semánticas se presentan y discuten a lo largo del libro.ComentariosEl programa que escriba debe ser claro no solo para usted, sino también para el lector de su programa. Parte de una buena programación es la inclusión de comentarios en el programa. Por lo general, los comentarios se pueden usar para identificar a los autores del programa, dar la fecha en que se escribe o modificar el programa, dar una breve explicación del programa y explicar el significado de las declaraciones clave en un programa. En los ejemplos de programación, para los programas que escribimos, no incluiremos la fecha en que el programa está escrito, de acuerdo con la convención estándar para escribir tales libros.Los comentarios son para el lector, no para el compilador. Entonces, cuando un compilador compila un programa para verificar los errores de sintaxis, ignora completamente los comentarios. A lo largo de este libro, los comentarios se muestran en verde.El programa en el Ejemplo 2-1 contiene los siguientes comentarios://**************************************************************// Given the length and width of a rectangle, this C++ program// computes and outputs the perimeter and area of the rectangle.//**************************************************************Hay dos tipos comunes de comentarios en un programa C++: los comentarios de una sola línea y comentarios de varias líneas.Los comentarios de una sola línea comienzan con // y se pueden colocar en cualquier lugar de la línea. Todo lo que se encuentra en esa línea después de // es ignorado por el compilador. Por ejemplo, considere la siguiente declaración:cout &lt;&lt; \"7 + 8 = \" &lt;&lt; 7 + 8 &lt;&lt; endl;Puedes poner comentarios al final de esta línea de la siguiente manera:cout &lt;&lt; \"7 + 8 = \" &lt;&lt; 7 + 8 &lt;&lt; endl; //prints: 7 + 8 = 15Este comentario podría ser significativo para un programador principiante.Los comentarios de varias líneas se incluyen entre /* y */. El compilador ignora cualquier cosa que aparezca entre /* y */. Por ejemplo, el siguiente es un ejemplo de un comentario de varias líneas:/*\tYou can include comments that can\toccupy several lines.*/En los comentarios de varias líneas, muchos programadores utilizan comentarios de una sola línea en cada línea para hacer que los comentarios se destaquen más al lector (como se hizo en el programa del Ejemplo 2-1).Símbolos especialesLa unidad individual más pequeña de un programa escrito en cualquier idioma se llama token. Los tokens de C++ se dividen en símbolos especiales, símbolos de palabras e identificadores. Los siguientes son algunos de los símbolos especiales:            +      -      *      /              .      ;      ?      ,              &lt;=      !=      ==      &gt;=      La primera fila incluye símbolos matemáticos para suma, resta, multiplicación y división. La segunda fila consta de signos de puntuación tomados de la gramática inglesa. Tenga en cuenta que la coma es también un símbolo especial. En C++, las comas se usan para separar elementos en una lista. Los puntos y comas también son símbolos especiales y se utilizan para finalizar una declaración en C++. Tenga en cuenta que un espacio en blanco, que no se muestra arriba, también es un símbolo especial. Usted crea un símbolo en blanco presionando la barra espaciadora (solo una vez) en el teclado. La tercera fila consta de fichas compuestas por dos caracteres que se consideran como un solo símbolo. Ningún carácter puede aparecer entre los dos caracteres en el token, ni siquiera un espacio en blanco.Palabras reservadas (palabras clave)Una segunda categoría de fichas es símbolos de palabras reservadas. Algunos de los símbolos de palabras reservados incluyen los siguientesint, float, double, char, const, void, returnLas palabras reservadas también son llamadas palabras clave. Las letras que componen una palabra reservadas son siempre en minúscula. Como los símbolos especiales, cada una es considerada como un símbolo único. Además, las palabras reservadas no pueden ser redefinidas dentro de cualquier programa, esto es, ellos no puede ser utilizado para nada más que su uso previsto. Para una lista completa de palabras reservadas, vea.            and_eq      double      new      switch              and      dynamic_cast      not_eq      template              asm      else      not      this              auto      enum      nullptr      throw              bitand      explicit      operator      true              bitor      export      or_eq      try              bool      extern      or      typedef              break      false      private      typeid              case      float      protected      typename              catch      for      public      union              char      friend      register      unsigned              class      goto      reinterpret_cast      using              compl      if      return      virtual              const_cast      inline      short      void              const      int      signed      volatile              continue      long      sizeof      wchar_t              default      mutable      static_cast      while              delete      namespace      static      xor_eq              do             struct      xor        A lo largo de este libro, las palabras reservadas son mostradas de azul.IdentificadoresUna tercera categoría de símbolo son los identificadores. Los identificadores son los nombres de cosas que aparecen en los programas, como las variables, constantes y funciones. Todos los identificadores deben obedecer las reglas de C++ para identificadores.Identificador: Un identificador en C++ consiste de letras, dígitos, el carácter guion bajo (_) y debe empezar con un letras o guion bajo.Algunos identificadores son predefinidos, otros son definidos por el usuario. En un programa en C++ en el Ejemplo 2-1, cout es un identificador predefinido y length es un identificador definido por el usuario. Dos identificadores que ya habrás encontrado familiar son cout y cin. Ya hemos visto el efecto de cout. Más adelante en este capítulo, aprenderás cómo trabaja cin que es usado para ingresar datos. A diferencia de las palabras reservadas, los identificadores predefinidos pueden ser redefinidos, pero no sería prudente hacerlo.Los identificadores puede estar formado por solo caracteres, dígitos, y el carácter guion bajo (_); ningún otro símbolo es permitido para formar un identificador.  C++ distingue mayúsculas y minúsculas, letras mayúsculas y letras minúsculas son consideradas diferentes. Por lo tanto el identificador NUMBER no es lo mismo que el identificador number. De igual forma, X y x son diferentes.En C++, los identificadores pueden tener cualquier longitud.Ejemplo 2-2Los siguientes son identificadores válidos en C++:firstconversionpayRatecounter1La tabla 2-1 muestra algunos identificadores inválidos y explica por qué son inválidos y también da un identificador válido.            Identificador inválido      Razón      Un identificador válido              employee Salary      No puede haber espacio entre employee y Salary.      employeeSalary              Hello!      El signo de exclamación no puede ser usado como un identificador.      Hello              one + two      El símbolo + no puede ser usado como un identificador.      onePlusTwo              2nd      Un identificador no puede empezar con un dígito.      second        Los proveedores de compiladores generalmente comienzan ciertos identificadores con un guion bajo (_). Cuando el enlazador vincula el programa objeto con los recursos del sistema proporcionados por el entorno de desarrollo integrado (IDE), ciertos errores podrían ocurrir. Por lo tanto, se recomienda que no inicie un identificador con un guion bajo (_).Espacios en blancoCualquier programa en C++ contiene espacios en blanco. Los espacios en blanco incluyen espacios en blanco, tabulaciones y caracteres de nueva línea. En un programa en C++, los espacios en blanco se utilizan para separar símbolos espciales, palabras reservadas e identificadores. Los espacios en blanco no son imprimibles en el sentido que cuando ellos son impresos en un retazo de papel, los espacios entre símbolos especiales, palabras reservadas e identificadores es blanco. La utilización apropiada de espacios en blanco es importante. Ellos ayudan a hacer el programa más legible.Tipos de datosEl objetivo de un programa en C++ es manipular datos. LasEl objetivo de un programa de C ++ es manipular los datos. Diferentes programas manipulan los datos. Diferentes programas manipulan diferentes datos. se agregará un programa diseñado para calcular el sueldo de un empleado,\\documentclass[tikz, border=1mm]{standalone}\\usetikzlibrary{calc,arrows,babel}\\begin{document}\t\\begin{tikzpicture}\t\\draw[color=red, dotted, line width=3pt] (0,0) rectangle (2.5,2.5);\t\\end{tikzpicture}\t\\begin{tikzpicture}\t\\shade[bottom color = cyan, top color = blue, ball color = green] (0,0) -- (3,0) -- (0,3) -- cycle;\t\\end{tikzpicture}\t\t\\begin{tikzpicture}\t\\draw[step = .5, gray!75] (-2,2) grid (9,4);\t\\end{tikzpicture}\\begin{tikzpicture}\t\\draw[thick, -&gt;, &gt;=stealth] (-2,-2) arc[start angle = 0, end angle = 45, radius = 1];\\end{tikzpicture}\\begin{tikzpicture};\\end{tikzpicture}\\end{document}La unidad por defecto es el cm"
}, 

{
"id": "-practice-2018-12-31-introduction_ii",
"title": "An overview of computers and programming languages (P)",
"author": null,
"tags": ["hello-world", "odd"],
"url": "/practice/2018/12/31/introduction_ii/",
"date": "2018-12-31",
"content": "A continuación, proporcionamos ejemplos de varias técnicas de análisis de problemas y de diseño de algoritmos.Tabla de contenidos  Ejemplos          Ejemplo 1-1      Ejemplo 1-2      Ejemplo 1-3      Ejemplo 1-4      Ejemplo 1-5        EjerciciosEjemplos Ejemplo 1-1 En este ejemplo, diseñamos un algoritmo para encontrar el perímetro y el área de un rectángulo.Para encontrar el perímetro y el área de un rectángulo, necesitas conocer el largo y ancho del rectángulo. El perímetro y el área del rectángulo luego son dadas por las siguientes fórmulas:perimeter = 2 * (length + width)area = length * widthEl algoritmo para encontrar el perímetro y el área de un rectángulo es como sigue:  Consigue el largo del rectángulo.  Consigue el ancho del rectángulo.  Encuentre el perímetro usando la siguiente ecuación:    perimeter = 2 * (length + width)        Encuentre el área usando la siguiente ecuación:    area = length * width      #include &lt;iostream&gt;using namespace std;int main(){\tfloat perimter, length, width, area;\tcout &lt;&lt; \"Enter the length of the rectangle.\" &lt;&lt; endl;\tcin &gt;&gt; length;\tcout &lt;&lt; \"Enter the with of the rectangle.\" &lt;&lt; endl;\tcin &gt;&gt; width;\tperimeter = 2 * (length + width);\tarea = length * width;\tcout &lt;&lt; \"The perimter of rectangle is \" &lt;&lt; perimeter &lt;&lt; endl;\tcout &lt;&lt; \"The area of rectangle is \" &lt;&lt; perimeter &lt;&lt; endl;\treturn 0;}Ejemplo 1-2 En este ejemplo, diseñamos un algoritmo que calcula el impuesto a las ventas y el precio de un artículo vendido en un estado particular.El impuesto a las ventas es calculado como sigue: La parte del impuesto a las ventas de los estados es %, y la parte del impuesto a las ventas de la ciudad es del %. Si el artículo es un artículo de lujo, como un automóvil más de , entonces hay un impuesto de lujo del %.Para calcular el precio del artículo, necesitamos calcular la parte del impuesto a las ventas del estado, la parte del impuesto al impuesto a las ventas, y, si el artículo es de lujo, el impuesto de lujo. Suponga que salePrice denota el precio de venta del artículo, stateSalesTax denota el impuesto a la venta del estado, citySalesTax denota el impuesto a la venta de la ciudad, luxuryTax denota el impuesto de lujo, salesTax, denota el impuesto a la venta total, y amountDue denota el precio final del artículo.Para calcular el impuesto a la venta, debemos conocer el precio de venta de cada artículo y cuando sea un artículo de lujo.El stateSalesTax y citySalesTax puede ser calculado usando las siguientes fórmulas:stateSalesTax = salePrice * 0.04citySalesTax = salePrice * 0.015A continuación, puede determinar luxuryTax como sigue:if (item is a luxury item)\tluxuryTax = salePrice * 0.1otherwise\tluxuryTax = 0A continuación, puede determinar salesTax como sigue:salesTax = stateSalesTax + citySalesTax + luxuryTaxFinalmente, puede determinar amountDue como sigue:amountDue = salePrice + salesTaxEl algoritmo para determinar salesTax y amountDue es, por lo tanto:  Conseguir el precio de venta de cada artículo.  Determinar cuándo el artículo es un artículo de lujo.  Encuentre la parte del impuesto a la venta del estado usando la fórmula:    stateSalesTax = salePrice * 0.04        Encuentre la parte del impuesto a la venta de la ciudad usando la fórmula:    citySalesTax = salePrice * 0.015        Encuentre el impuesto de lujo usando la siguiente fórmula:    if (item is a luxury item)     luxuryTax = salePrice * 0.1otherwise     luxuryTax = 0        Encuentre salesTax usando la fórmula:    salesTax = stateSalesTax + citySalesTax + luxuryTax        Encuentre amountDue usando la fórmula:    amountDue = salePrice + salesTax      Ejemplo 1-3 En este ejemplo, diseñamos un algoritmo que calcula el cheque mensual de un vendedor en una tienda por departamentos local.Cualquier vendedor tiene un salario base. El vendedor también recibe un bono al final de cada mes, basado en los siguientes criterios: Si el vendedor ha estado en la tienda por cinco años o menos, el bono es  por cada año que él o ella ha trabajo allá. Si el vendedor ha estado trabajando en la tienda por más de cinco años, el bono es  por acada año que él o ella ha trabajado allá. El vendedor puede ganar una bonificación adicional de la siguiente manera: Si las ventas totales realizadas por el vendedor durante el mes son al menos  pero menos que , él o ella recibe una comisión del % de la venta. Si el total de las ventas realizadas por el vendedor son por lo menos , él o ella reciben una comisión del % de la venta.Para calcular el cheque mensual de un vendedor, necesitas conocer el salario base del número de años que el vendedor ha estado en la compañía, y las ventas total realizadas por vendedor durante el mes. Suponga que el baseSalary denota el salario base, noOfServiceYears denota el número de años que el vendedor ha estado en la tienda, bonus denota el bono, totalSales denota las ventas totales realizadas por el vendedor durante el mes, y additionalBonus denota el bono adicional.Puede determinar el bono como sigue:if (noOfServiceYears is less than or equal to five)\tbonus = 10 * noOfServiceYearsotherwise\tbonus = 20* noOfServiceYearsA continuación, puede determinar el bono adicional del vendedor como sigue:if (totalSales is greather than or equal to 5000 and totalSales is less than 10000)\tadditionalBonus = totalSales * (0.03)otherwise\tadditionalBonus = totalSales * (0.06)Siguiendo la discusión de arriba, puede ahora diseñar el algoritmo para calcular el cheque mensual de un vendedor:  Consiga baseSalary.  Consiga noOfServiceYears.  Calcule el bono usando la siguiente fórmula:    if (noOfServiceYears is less than or equal to five)     bonus = 10 * noOfServiceYearsotherwise     bonus = 20 * noOfServiceYears        Consiga totalSales.  Calcule additionalBonus usando la siguiente fórmula:    if (totalSales is less than 5000)     additionalBonus = 0otherwise     if (totalSales is greather than or equal to 5000 and totalSales is less than 10000)         additionalBonus = totalSales * (0.03)     otherwise         additionalBonus = totalSales * (0.06)        Calcule payCheck usando la ecuación:    payCheck = baseSalary + bonus + additionalBonus      Ejemplo 1-4 En este ejemplo, diseñamos un algoritmo para jugar un juego de adivinar números. El objetivo es generar aleatoriamente un número entero mayor o igual a  y menor de . Entonces el aviso del jugador (usuario) conjetura el número. Si el jugador adivina el número correctamente, muestra un mensaje apropiado. De lo contrario, compruebe si el número adivinado es menor que el número aleatorio, muestra el mensaje, “Tu conjetura es menor que el número. Conjetura otra vez!”; caso contrario, muestra el mensaje, “Tu conjetura es mayor que el número Conjetura otra vez!”. El jugador es avisado para ingresar otro número. El jugador es avisado para adivinar el número aleatorio a menos que el jugador ingrese el número correcto.El primer paso es generar un número aleatorio, como es descrito arriba. C++ proporciona los medios para hacerlo, que se discute en el capítulo 5. Suponga que num representa el número aleatorio y guess representa el número adivinado por el jugador.Después que el jugador ingresa el guess, puede comparar el guess con el nüumero aleatorio como sigue:if (guess is equal to num)\tPrint \"You guessed the correct number.\"otherwise\tif (guess is less than num)\t\tPrint \"Your guess is lower than the number. Guess again!\"\totherwise\t\tPrint \"Your guess is higher than the number. Guess again!\"Puede ahora diseñar el algoritmo como sigue:  Genere el número aleatorio y llámalo num.  Repita los siguientes pasos hasta el que jugador ha adiviando el número correcto:a. Pida al jugador que ingrese guess.b. Verifique el valor de guess.    if (guess is equal to num)     Print \"You guessed the correct number.\"otherwise     if (guess is less than num)         Print \"Your guess is lower than the number. Guess again!\"     otherwise         Print \"Your guess is higher than the number. Guess again!\"        En el capítulo 5, usaremos este algoritmo para escribir un programa C++ para juegar el juego de adivinar números.  Ejemplo 1-5 Hay  estudiantes en una clase. Cada estudiante ha tomado cinco pruebas, y cada prueba vale  puntos. Queremos diseñar un algoritmo que calcule el grado para cada estudiante, así como el promedio de la clase. El grado es asignado como sigue: Si el puntaje medio de la prueba es mayor o igual que , el grado es A; si el puntaje medio de la prueba es mayor o igual que   y menor que , el grado es B; si el puntaje medio de la prueba es mayor o igual que  y menor que , el grado es C; si el puntaje medio de la prueba es mayor o igual que   y menor que , el puntaje es D; caso contrario, el grado es F. Tenga en cuenta que los datos consisten en los nombres de los estudiantes y sus puntajes de la prueba.Este es un problema que puede ser dividio en subproblemas como sigue: Hay cinco pruebas, diseñe un algoritmo para encontrar el puntaje promedio de la prueba. A continuación, diseñe un algoritmo que determine el grado. Los dos subproblemas son para determinar el puntaje promedio de la prueba y calcular el grado.Primero diseñemos un algoritmo para determinar el puntaje medio de la prueba. para encontrar el puntaje medio de la prueba, agregue los cinco puntajes de la prueba y luego divida la suma por . Por lo tanto, el algorimo es como sigue:  Consiga los cinco puntajes de la prueba.  Suma los cinco puntajes de la prueba. Suponga que sum representa la suma de los puntajes de la prueba.  Suponga que average represent el puntaje promedio de la prueba. Entonces    average = sum / 5;        A continuación, diseñe un algoritmo que determine el grado. Suponga que grade representa el grado asignado a un estudiante. El siguiente algoritmo determina el grado:    if average is greater than or equal to 90     grade = Aotherwise if average is greater than or equal to 80         grade = B otherwise     if average is greater than or equal to 70             grade = C     otherwise         if average is greater than or equal to 60                 grade = D         otherwise                 grade = F        Puede usar las soluciones de estos subproblemas para diseñar el algoritmo principal como sigue: (Suponga que totalAverage representa la suma de los promedios de la nota media de cada estudiante)    totalAverage = 0;  Repita los siguientes pasos para cada estudiante en la clase: a. Consiga el nombre del estudiante. b. Use el algoritmo discutido arriba para encontrar el puntaje medio de la prueba. c. Use el algoritmo discutido arriba para encontrar el grado.  Actualice totalAverage añadiendo el puntaje promedio de la prueba del estudiante actual.  Determine el promedio de clase como sigue:    classAverage = totalAverage / 10        Un ejercicio de programación en el capítulo 8 le pregunta que escriba un programac C++ para calcular el puntaje promedio de la prueba y el grado de cada estudiante en una clase.    Nota Al inicio de este capítulo se describió el análisis del problema, codificación y el ciclo de ejecución. En esta sección, ganamos varios ejemplos que ilustran el análisis del problema y el ciclo de codificación. Hay que señalar que el análisis de problemas es la parte más importante de la programación. Una vez que haya analizado el problema y haya escrito los pasos necesarios de la solución en su idioma nativo, entonces, como verá a través del texto, escribir el código C++ para implementar su solución es relativamente fácil. Además, pronto reconocerá que los pasos de sus soluciones se pueden traducir efectivamente a un código C++. Además, un buen análisis de problemas conducirá a un programa mejor y más limpio. Incluso aunque todavía no hemos introducido la sintaxis de C++, para ilustrar cómo escribir un código de C++ correspondiente a los pasos de su solución, consideremos el algoritmo diseñado en el ejemplo 1-1. Suponga length, width, perimeter, and area representa la longitud, ancho, perímetro, y área de un rectángulo. Aquí están los cuatro pasos de un algoritmo y sus correspondientes declaraciones C++:            Paso de algoritmo      Instrucción C++ (código)                  1. Consiga la longitud del rectángulo.      cin &gt;&gt; length;              2. Consiga el ancho del rectángulo.      cin &gt;&gt; width;              3. Calcule el perímetro.      perimeter = 2 * (length + width);              4. Calcule el área.      area = length * width;      Considere la primera declaración. En C++, cin representa la entrada común. Durante la ejecución del programa, el código asociado a él le indica al usuario que ingrese datos y si el usuario ingresa un dato válido, ese dato se almacenará en la memoria, es decir, se convertirá en el valor de length. El código C++ en el paso 3 usa los valores de length y width para calcular el perimeter, que luego se asigna a perimeter.Para escribir un programa completo en C++ para calcular el área y el perímetro, necesita conocer la estructura básica de un programa en C++, el cual será introducido en el siguiente capítulo. Sin embargo, si tiene curiosidad por saber cómo se ve el programa completo de C++, puede visitar el sitio web que acompaña a este libro y consultar el código de programación almacenado en el archivo Ch1_Example_1-1_Code.cpp.Ejercicios El número entre paréntesis al final de un ejercicio se refiere al objetivo de aprendizaje listado al comienzo del capítulo.  Marque las siguientes afirmaciones como verdaderas o falsas.          El dispositivo de cálculo llamado la Pascalina podría calcular sumas de hasta ocho cifras. (1) :ballot_box_with_check:      Todos los programas deben cargarse en la CPU antes de poder ejecutarlos y todos los datos deben cargarse en la memoria principal antes de poder manipularlos. (2) :ballot_box_with_check:      La memoria principal es una secuencia ordenada de celdas y cada celda tiene una localización aleatoria en la memoria principal. (2) :x:      El programa que se carga primero cuando enciendes tu computadora se llama sistema operativo. (2) :ballot_box_with_check:      Las señales analógicas representan información con una secuencia de 0s y 1s. (3) :x:      El lenguaje de máquina es una secuencia de 0s y 1s. (3) :ballot_box_with_check:      Un código binario es una secuencia de 0s y 1s. (3) :x:      Una secuencia de ocho bits se llama un byte. (3) :ballot_box_with_check:      Un GB es de  MB. (3) :x:      En ASCII, A es el carácter en la posición 65. (3) :ballot_box_with_check:      El sistema numérico usado por una computadora es la base dos. (3) :ballot_box_with_check:      Un ensamblador traduce las instrucciones del lenguaje ensamblador en lenguaje máquina. (4) :ballot_box_with_check:      Un compilador traduce el programa fuente en un programa objeto.      En un programa C++, las declaraciones que empiezan con el símbolo # son llamadas directivas del procesador. (7) :ballot_box_with_check:      Un programa objeto es la versión del lenguaje máquina de un programa de un lenguaje en alto nivel. (9) :ballot_box_with_check:      Todos los errores lógicos, tales como la división por cero, son reportados por el compilador. (9) :ballot_box_with_check:      En el diseño orientado a objetos (ODD), un programa es una colección de objetos interactuando. (10) :ballot_box_with_check:      Un objeto consiste de datos y operaciones en esos datos. (10) :ballot_box_with_check:      ISO significa International Organization for Standardization. (11) :ballot_box_with_check:        ¿Cuáles son los componentes del hardware que realizan operaciones aritméticas y lógicas?  ¿CUál sistema numérico es utilizado por una computadora?  ¿Qué es un programa objeto?  ¿Qué es el enlazamiento?  ¿Which program loads the executable code from the main memoory into the CPU for execution?  En un programa C++, con qué símbolos inicia las directivas del preprocesador?  En un programa C++, cuál programa procesa las declaraciones que empiezan con el símbolo #?  ¿Qué es la programación?  ¿Qué es un algoritmo?  Describe los pasos requeridos para el proceso de resolución de problemas.  Describe los pasos requeridos en la fase de análisis de la programación  Diseña un algoritmo que calcule el peso promedio de cuatro puntas de prueba. Los cuatro puntajes de pruebas y sus respectivos pesos son datos en el siguiente formato:    testScore weightTestScore...        Diseñe un algoritmo para convertir el cambio dado en cuartos, monedas de diez centavos, centavos y centavos en centavos.  Dado el radio, en pulgadas, y el precio de una pizza, diseñe un algoritmo para encontrar el precio de la pizza por pulgada cuadrada.  El costo de un automóvil por parte del concesionario es el 85% del precio indicado. el concesionario aceptaría cualquier oferta que sea de al menos  sobre el costo del concesionario. Diseñe un algoritmo que solicite al usuario que ingrese el precio de lista del automóvil e imprima la cantidad mínima que el concesionario aceptaría para el automóvil.  El volumen de una esfera es  y el área superficial es , donde  es el radio de la esfera. Dado el radio, diseñe un algoritmo que calcule el volumen y área superficial de la esfera. También usando las declaraciones C++ provistas por el ejemplo 1-1, escriba una declaración C++ correspondiente a cada declaración en el algoritmo. (Debe asumir que .)  Tom y Jerry abrieron un nuevo servicio de jardinería. Ellos proveen tres tipos de servicios: cortar, fertilizar y plantar árboles. el costo de cortar es 5000\\30.00$ por aplicación, y plantar un árbol es $$\\50.00$. Escriba un algoritmo que indique al usuario ingresar el área del jardín, el número de aplicaciones fertilizantes, y el número de árboles que se plantarán. El algoritmo, entonces determina el monto de facturación. (Asuma que el usuario ordena todos los tres servicios.)  Jason típicamente usa el internet para comprar varios artículos. Si el costo total de los artículos ordenadores, en la primera vez, es \\10$$ por artículo. Diseñe un algoritmo que pida a Jason que ingrese el número de artículos ordenados y el precio de cada artículo. El algoritmo luego genera el monto total de la facturación. su algoritmo debe usar un bucle (estructura de repetición) para obtener el precio de cada artículo. (Para simplificar, puede suponer que Jason no ordena más de cinco artículos a la vez.)  Un cajero automático permite a un cliente retirar un máximo de  por día. Si un cliente retira más de , el cargo por servicio es del 4% del monto de más de . Si el cliente no tiene suficiente dinero en la cuenta, el cajero automático informa al cliente sobre los fondos insuficientes y le da la opción de retirar el dinero por un cargo por servicio de . Si no hay dinero en la cuenta o si el saldo de la cuenta es negativo, el cajero automático no le permite al cliente retirar dinero. Si la cantidad a retirar es mayor a , el cajero automático informa al cliente sobre la cantidad máxima que se puede retirar. Escriba un algoritmo que permite al cliente ingresar la cantidad a retirar. el algoritmo luego verifica el monto total en la cuenta, dispensa el dinero al cliente y carga a la cuenta por el monto retirado y los cargos del servicio, si corresponde.  Diseñe un algoritmo que calcule las raíces reales de una ecuación cuadrática de la forma , donde ,  y  son números reales, y  es distinto de cero.  Un estudiante invierte la mayoría de su fin de semana jugando y mirando deportes, por lo tanto, cansándolo y llevándolo a quedarse dormido y, a menudo, se pierde su clase de matemáticas de lunes a las 8 AM. Supongamos que la matrícula por semestre es de  y el semestre promedio consta de  unidades. Si la clase de matemáticas se reúne tres días a la semana, una hora cada día durante  semanas y es un curso de cuatro unidades, ¿cuánto le cuesta al estudiante cada hora de clase de matemáticas? Diseñe un algoritmo que calcule el costo de cada clase de matemáticas.  Se le da una lista de los nombres de los estudiantes y sus calificaciones en los exámenes. Diseñe un algoritmo que haga lo siguiente:a. Calcule los puntajes promedio de las pruebas.b. Determine e imprima los nombres de todos los estudiantes cuyas puntuaciones de prueba están por debajo de la puntuación de prueba promedio.c. Determine el más alto puntaje de prueba.d. Imprima los nombres de todos los estudiantes cuyas puntuaciones de las pruebas son las mismas que las de la puntuación más alta.(Cada una de las partes , ,  y  deben ser resueltas como un subproblema. El algoritmo principal combina las soluciones de los subproblemas.)"
}, 

{
"id": "-theory-2018-12-24-introduction_i",
"title": "An overview of computers and programming languages (T)",
"author": null,
"tags": ["hello-world", "history", "elements"],
"url": "/theory/2018/12/24/introduction_i/",
"date": "2018-12-24",
"content": "En este capítulo,  Aprenderás sobre los distintos tipos de ordenadores.  Explorarás los componentes del software y del hardware de un sistema computacional.  Aprenderás sobre el lenguaje de las computadoras.  Aprenderás sobre la evolución de los lenguajes de la computadora.  Examinarás los lenguajes de programación de alto nivel.  Descubrirás qué es el compilador y qué es lo que hace.  Examinarás un programa en C++.  Explorarás cómo un programa en C++ es procesado.  Aprenderás qué es un algoritmo y explorarás las técnicas para resolver problemas.  Tomarás conciencia del diseño de la estructura y las metodologías del diseño de la programación orientada a objetos.  Tomarás conciencia del ANSI/ISO Standard C++, C++11, C++14.Tabla de contenidos  Introducción  Un breve resumen de la historia de las computadoras  Elementos de un sistema computacional          Hardware      Unidad de procesamiento central y memoria principal      Almacenamiento secundario      Dispositivos de entrada/salida      Software        El lenguaje del ordenador  La evolución de los lenguajes de programación  Procesando un programa en C++  Programando con el análisis del problemas, codificación, ciclo de ejecución  Metodologías de programación  Programación estructurada  Programación orientada a objetos  Norma ANSI/ISO C++  Repaso rápidoIntroducción Términos tales como “el internet”, que fueron desconocidos justo hace 25 años ahora son comunes. Los estudiantes en la escuela elemental “surfean” regularmente el internet y usan computadoras para diseñar e implementar sus projectos de clase. Muchas personas usan el internet para buscar información y para comunicarse con otros. Todo esto es posible por el uso de una varidad de software, también conocido como programas de ordenadores. Sin el software, las computadoras no pueden trabajar. El software es desarrollado por el uso de lenguajes de programación. C++ es uno de los lenguajes de programación, que es muy adecuado para desarollar software que cumplan tareas específicas. El objetivo principal del libro es ayudar que aprendas el lenguaje de programación C++ para escribir programas. Antes que inicies a programar, resulta útil entender algunas de la terminología básica y los diferentes componentes de una computadora. Empezaremos con un resumen de la historia de las computadoras.Un breve resumen de la historia de las computadoras   El primer dispositivo conocido para llevar a cabo cálculos fue el ábaco.  En 1642, el filósofo francés y matemático Blaise Pascal inventó un dispositivo de cálculo llamado la Pascalina.  Luego en el siglo XVII, Gottfried von Leibniz inventó un dispositivo que podía sumar, restar, multiplicar y dividir.  En 1819, Joseph Jacquard, un tejedor francés, descubrió que las instrucciones de tejer para sus telares se pueden almacenar en tarjetas con agujeros perforados.  A principios y mediados de 1800, Charles Babbage, un matemático inglés, diseñó dos máquinas calculadoras: la diferencia entre la máquina diferencial y la máquina analítica.Elementos de un sistema computacional Una computadora es un dispositivo electrónico capaz de realizar comandos. Los comandos básicos que una computadora realiza son la entrada (obtener datos), salida (mostrar el resultado), almacenamiento, y realizar operaciones artiméticas y lógicas. Existen dos componentes principales de un sistema informático: hardware y software. En las siguientes secciones, aprenderás un breve resumen de estos componentes. Veamos primero el hardware.Hardware Los componentes principales incluyen la unidad de procesamiento central (CPU), memoria principal (MM), también llamado como memoria de acceso aleatorio (RAM), dispositivos de entrada/salida y el almacenamiento secundario. Algunos ejemplos de dipositivos de entrada son el teclado, el mouse y el almacenamiento secundario. Ejemplos de dispositivos de salida son la pantalla, la impresora y el almacenamiento secundario. Veamos cada uno de estos componentes en mayor detalle.Unidad de procesamiento central y memoria principal La unidad de procesamiento central es el “cerebro” de una computadora y la pieza más costosa del hardware de una computadora. Cuanto más poderosa sea el CPU, más rápida será el ordenador. Las operaciones aritméticas y lógicas se llevan a cabo en el CPU.La memoria principal, o la memoria de acceso aleatorio, es conectada directamente al CPU. Todos los programas deben ser cargadas en la memoria principal antes de que ellos sean ejecutados. Similarmente, todos los datos deben ser llevados a la memoria principal antes que un programa puede ser manipulado. Cuando la computadora se apaga, todo en la memoria principal se pierde.La memoria principal es una secuencia ordenada de celdas, llamada celdas de memoria. Cada celda tiene una única localización en la memoria principal, llamada la dirección de la celda. Cada dirección le ayuda a acceder la información guardada en la celda. La Figura 1-1 (b) muestra la memoria principal con algunos datos.Las computadoras de hoy vienen con la memoria principal que consta de millones de billones de celda. A pesar que la Figura 1-1 (b) muestra los datos guardados en celdas, el contenido de cada celda puede ser una instrucción de programación o datos. Es más, esta figura muestra los datos como números y letras. Sin embargo, como se explicó anteriormente en este capítulo, la memoria principal guarda todo como secuencias de ceros y unos. La dirección de memoria también es expresada como secuencias de ceros y unos.Almacenamiento secundario Porque los programas y los datos deben ser cargados en la memoria principal antes del procesamiento y porque todo en la memoria principal es perdida cuando la computadora es apagada, la información guardada en la memoria principal debe ser guardado en algún otro dispositivo para su almacenamiento permamente. El dispositivo que almacena información permanentemente (a menos que el dispositivo se vuelva inutilizable o cambia la información reescribiéndola) es llamada almacenamiento secundario. Para habilitar la transferencia de información desde la memoria principal hacia la memoria secundaria, estos componentes deben estar directamente conectados entre sí. Ejemplos de almacenamiento secundario son los discos duros, unidades flash y los CD-ROM.Dispositivos de entrada/salida Para que una computadora realice una tarea útil, debe de permiterle tomar los datos y programas y mostrar los resultados de los cálculos. Los dispositivos que alientan los datos y programas a las computadoras son llamados dispositivos de entrada. El teclado, el mouse, el escáner, la cámara y el almacenamiento secundario son ejemplos de dispositivos de entrada. Los dispositivos que la computadora usa para mostrar los resultados son llamados dispositivos de salida. El monitor, la impresora y el almacenamiento secundario son ejemplos de dispositivos de salida.Software El software son programas escritos para realizar tareas específicas. Por ejemplo, los procesadores de textos son programas que usa para escribir cartas, artículos, e incluso libros. Cualquier software es escrito en lenguajes de programación. Existen dos tipos de programas: los programas del sistema y los programas de aplicación.Los programas del sistema controla el ordenador. El programa del sistema que se carga primero cuando enciende su computadora es llamado sistema operativo. Sin un sistema operativo, la computadora es inútil. El sistema operativo maneja la actividad general de un ordenador y provee servicios. Algunos de estos servicios incluye la administración de memoria, actividades de entrada/salida, y administración del almacenamiento. El sistema operativo tiene un programa especial que organiza el almacenamiento secundario para que pueda acceder cómodamente a la información. Algunos sistemas operativos bien conocidos son Windows 10, Mac OS X, GNU/Linux, FreeBSD, UNIX y Android.Los programas de aplicación realiza una tarea específica. Los procesadores de texto, hojas de cálculo son ejemplos de programas de aplicación. El sistema operativo es el programa que corre los programas de aplicación.El lenguaje del ordenador Cuando oprime A en su teclado, la computadora muestra A en la pantalla. Pero, ¿qué es lo que realmente se almacena dentro de la memoria principal del ordenador? ¿Cuál es lenguaje del ordenador? ¿Cómo almacena lo que escribe en el teclado?Recuerde que un ordenador es un dispositivo electrónico. Las señales eléctricas son usadas dentro de la computadora para procesar la información. Existen dos tipos de señales eléctricas: analógica y digital. Las señales analógicas son formas de onda que varían continuamente y se usan para representar cosas como el sonido. Las cintas de audio, por ejemplo, almacenan datos en señales analógicas. Las señales digitales representan información con una secuencia de ceros y unos. Un 0 representa una baja tensión, y el 1 representa una alta tensión. Las señales digitales son portadores de información más confiables que las señales analógicas y pueden ser copiados desde un dispositivo a otro con una precisión exacta. Es posible que haya notado que cuando hace una copia de una cinta de audio, la calidad del sonido de la copia no es tan buena como el de la cinta original. Por otro lado, cuando copia un CD, la copia es la misma que el original. Las computadoras usan señales digitales.Porque las señales digitales son procesadas dentro de una computadora, el lenguaje de la computadora, llamada lenguaje máquina, es una secuencia de ceros y unos. El digito 0 o 1 es llamado dígito binario, bit. Algunas veces una secuencia de ceros y unos es llamado como un código binario o un número binario.Bit: Un dígito binario 0 o 1.Una secuencia de ocho dígitos es llamado un byte. Es más,  bytes  bytes es llamado un kilobyte (KB). La Tabla 1-1 resume los términos utilizados para describir varios números de bytes.            Unidad      Símbolo      Bits/Bytes                  Byte              bits              Kilobyte      KB       bytes =  bytes              Megabyte      MB       KB  KB  bytes =  bytes              Gigabyte      GB       MB  MB  bytes =  bytes              Terabyte      GB       GB  GB  bytes =  bytes              Petabyte      TB       TB  GB  bytes =  bytes              Exabyte      EB       MB  PB  bytes =  bytes              Zettabyte      ZB       EB  EB  bytes =  bytes      Cualquier letra, número, o símbolo especial (tales como  o ) en su teclado es codificado como una secuencia de bits, cada uno tiene una única representación. La codificación comúnmente usado esquema de codificación en computadoras personales es el siete-bit American Standard Code for Information Interchange (ASCII). El conjunto de datos ASCII consiste de  caracteres numerados del  al . Esto es, en el el conjunto de datos ASCII, la posición del primer carácter es 0, la posición del segundo carácter es 1, y así. En este esquema A es codificado con el número binario 1000001. De hecho, A es el carácter en la posición 66 en el código de caracteres ASCII, pero su posición es 65 debido a la posición del primer carácter es 0. Además, el número binario 1000001 es la representación binaria del 65. El carácter 3 es 51, entonces el carácter 3 es el carácter en la posición 52 del conjunto ASCII. También se sigue que 0110011 es la representación binaria de 51. Para una lista completa del conjunto de caracteres imprimibles ASCII, consulte el apéndice C.  Nota: El sistema numérico que usamos en nuestra vida diaria es llamado sistema decimal, o base 10. Porque todo dentro de la computadora es representada como una secuencia de ceros y unos, esto es, números binarios, el sistema numérico que la computadora usa es llamado binario, o base 2. Indicamos en el párrafo precedente que el número 1000001 es la representación binaria de 65. El Apéndice E describe cómo convertir el número desde la base 10 hacia la base 2 y viceversa.Dentro de la computadora, cualquier carácter es representado como una secuencia de ocho bits, que es, como un byte. Ahora la representación binaria de 65 es 01000001. Note que nosotros agregamos 0 a la izquierda de la representación de siete-bit de 65 para obtener su representación binaria de ocho-bit 01000001.ASCII es un código de siete bits. Por lo tanto, para representar cada carácter ASCII dentro de la computadora, debe convertir la representario binaria de siete bits a un carácter ASCII de un representación binaria de ocho bits. Esto se logra añadiendo 0 a la izquierda de la codificación ASCII de siete bits del carácter. Además, 3 es representado como 00110011.Existe otros esquemas de codificación, tales como Unicode. Unicode consiste de 65536 carácteres. Para almacenar un carácter perteneciente a Unicode, necesitarás 16 bits o dos bytes. Unicode fue creado para representar una variedad de caracteres y está en continua expansión. Consiste en carácteres de otros idiomas además del inglés.La evolución de los lenguajes de programación El lenguaje más básico de una computadora, el lenguaje máquina, proporciona instrucciones del programa en bits. Aunque la mayoría de las computadoras realizan el mismo tipo de operaciones, los diseñadores de la computadora pueden haber elegido diferentes conjuntos de códigos binarios para realizar las operaciones. Por lo tanto, el lenguaje máquina de un ordenador no es necesariamente el mismo lenguaje máquina de otro ordenador. La única coherencia entre las computadoras es que en cualquier computadora moderna, todos los datos se almacenan y manipulan como códigos binarios. Las primeras computadoras fueron programadas en lenguaje máquina. Para ver cómo las instrucciones son escritas en lenguaje máquina, suponga que quiere usar la ecuación:wages = rate * hourspara calcular salarios mensuales. Más allá, suponga que el código binario 100100 significa para cargar, 100110 significa multiplicar, y 10010 significar almacenar. En lenguaje máquina, es posible que necesite la siguiente secuencia de instrucciones para calcular los salarios semanales:100100 010001100110 010010100010 010011Para representar la ecuación de los salarios mensuales en lenguaje máquina, el programador tiene que recordar los códigos de lenguaje máquina para las operaciones diversas. También, para manipular los datos, el programador tiene que recordar las posiciones de los datos en la memoria principal. Esta necesidad de recordar códigos específicos hizo que la programación no solo fuera muy difícil, sino también propensa a errores.Los lenguajes ensambladores fueron desarrollados para hacer el trabajo del programador más fácil. En el lenguaje ensamblador, una instrucción es una forma fácil de recordar llamada mnemotécnica. Por ejemplo, suponga que LOAD significa para el código máquina 100100, MULT significa para el código máquina 100110 (multiplicación) y STOR significa para el código máquina 100010.Usando las instrucciones del lenguaje ensamblador puede escribir la ecuación para calcular el salario mensual como sigue:LOAD rateMULT hoursSTOR wagesComo puede ver, esto es mucho más fácil que escribir instrucciones en lenguaje ensamblador. Sin embargo, un computador no puede ejecutar las instrucciones del lenguaje ensamblador directamente. Las instrucciones primero tiene que transladarse en lenguaje máquina. Un programa llamado ensamblador traduce las instrucciones del lenguaje ensamblador en lenguaje máquina.  Ensamblador: Un programa que traduce un programa escrito en lenguaje ensamblador en un programa equivalente en lenguaje máquina.Pasando del lenguaje máquina a el lenguaje ensamblador hace la programación más fácil, pero un programador todavía estaba obligado a pensar en términos de instrucciones de máquina individuales. El siguiente paso hacia facilitar la programación fue idear lenguajes del alto nivel que fueran cercanos a los lenguajes naturales, tales como el inglés, francés, alemán y español. Basic, FORTRAN, COBOL, C, C++, C#, Java, y Python son todos lenguajes de alto nivel. Aprenderás el lenguaje de alto nivel C++ en este libro.En C++, escribe la ecuación del salario semanal como sigue:wages = rate * hours;La instrucción escrita en C++ es mucho más fácil de entender y es autoexplicativo para un usuario novato que está familiarizado con la aritmética básica. Como en el caso del lenguaje ensamblador, sin embargo, la computadora no puede directamente ejecutar instrucciones en lenguaje de alto nivel. Para ejecutar en una computadora, estas instrucciones C++ primero necesita ser traducido al lenguaje de máquina. Un programa llamado compilador traduce las intrucciones escritas en lenguajes de alto nivel al código máquina.  Compilador: Un programa que traduce instrucciones escritas en un lenguaje de alto nivel en el lenguaje máquina equivalente.Procesando un programa en C++ En las secciones previas, discutimos el lenguaje máquina y los lenguajes de alto nivel y mostramos una declaración C++. Debido a que la computadora puede entender solo lenguaje máquina, está listo para revisar los pasos necesarios para procesar un programa escrito en C ++.Considere el siguiente programa C++:#include &lt;iostream&gt;using namespace std;int main(){\tcout &lt;&lt; \"My first C++ program.\" &lt;&lt; endl;\treturn 0;}En este punto, no necesita estar demasiado preocupado con los detalles de este programa. Sin embargo, si corre (ejecuta) este programa, se mostrará la siguiente línea en la pantalladeepin@me:~$ My first C++ program.Recordemos que la computadora puede entender solo lenguaje máquina. Por lo tanto, con el fin de correr el programa satisfactoriamente, el código primero debe ser traducido en lenguaje máquina. En esta sección, repasaremos los pasos que se requiere para ejecutar los programas escritos en C++.Los siguientes pasos, como se muestran en la Figura 1-2, son necesarios para procesar un programa C++.  Debe usar un edtor de texto para crear un programa C++ siguiendo las reglas o sintáxis, del lenguaje de alto nivel. Este programa es llamado el código fuente, o programa fuente. El programa debe ser guardado en un archivo de texto que tenga la extensión .cpp. Por ejemplo, si guarda el programa precedente en el archivo llamado FirstCPPProgram, entonces su nombre completo es FirstCPPProgram.cpp.          Programa fuente: Un programa escrito en un lenguaje de alto nivel.        El programa C++ dado en la sección precedente contiene la declaración #include &lt;iostream&gt;. En un programa C++, las declaraciones que empiezan con el símbolo # son llamados directivas del preprocesador. Estas declaraciones son procesadas por un programa llamado preprocesador.  Después de procesar las directivas del preprocesador, el siguiente paso es verificar que el programa obedece las reglas del lenguaje de programación, esto es, el programa es sintácticamente correcto – y la traducción del programa en el lenguaje máquina equivalente. El compilador comprueba el programa fuente en busca de errores de sintaxis y, si no se encuentra ningún error, traduce el programa en el lenguaje máquina equivalente. El programa equivalente al lenguaje máquina es llamado un programa objeto.          Programa objeto: La versión del lenguaje máquina de lenguaje de alto nivel.        Los programas que escribe en lenguaje de alto nivel son desarrollados usando un entorno de desarrollo integrado (IDE). El IDE contiene varios programas que son útiles en la creación de su programa. Por ejemplo, contiene el código necesario (programa) para mostrar los resultados del programa y varias funciones matemáticas que hacen el trabajo del programador algo más fácil. Por lo tanto, si cierto código ya está disponible, puedes usar este código en lugar de escribir tu propio código. Una vez que el programa se haya desarrollado y compilado con éxito, aún debe llevar el código de los recursos utilizados desde el IDE a su programa para producir un programa final que la computadora pueda ejecutar. Este código pre escrito (programa) reside en un lugar llamado la biblioteca. Un programa llamado enlazador combina el programa objeto con los programas de las bibliotecas.          Enlazador: Un programa que combina el programa objeto con los otros programas en la biblioteca y es usado en el programa para crear el código ejecutable.        A continuación debe cargar el programa ejecutable en la memoria principal para su ejecución. Un programa llamado cargador logra esta tarea.          Cargador: Un programa que carga un programa ejecutable en la memoria principal.        El paso final es ejecutar el programa.Figura 1-2 muestra cómo se procesa un programa típico de C++.Como programador, principalmente necesitas preocuparte con el paso 1. Esto es, debes aprender, entender, y dominar las reglas del lenguaje de programación para creaar programas fuentes.Como se señaló anteriormente, los programas se desarrollan utilizando un IDE. Los IDEs conocidos utilizados para crear programas en el lenguaje de alto nivel C ++ incluyen Visual C++ Express (2013 o 2016) y Visual Studio 2015 (de Microsoft), GNU/Emacs, CLion de JetBeans y C++ Builder (de Borland). También puede usar Dev-C++ IDE de Bloodshed Software para crear y probar programas C++. Estos IDEs contiene un editor de texto para crear programas fuente, un compilador para verificar el programa fuente en busca de errores de sintaxis, un programa para enlazar el código objeto con los recursos del IDE, y un programa para ejecutar el programa.Estos IDEs son muy fáciles de usar. Cuando compila su programa, el compilador no solo identificas los errores de sintáxis, pero también suele sugerir cómo corregirlos. Es más, con un simple comando, el código objeto es enlazado con los recursos usado desde el IDE. Por ejemplo, el comando que hace el enlace en Visual C++ Express (2013 o 2016) o Emacs o CLion o Visual Studio 2015 es Construir o Reconstruir. (Para mayor aclaración sobre el uso de estos comandos, revise la documentación de estos IDEs.) Si el programa aún no está compilado, cada uno de estos comandos primero compila el programa y luego enlaza y produce el código ejecutable.Programando con el análisis del problemas, codificación, ciclo de ejecución La programación es un proceso de resolución de problemas. Diferentes personas usan técnicas diferentes para resolver problemas. Algunas técnicas son bien delineadas y fáciles de seguir. No solo resuelven el problema, sino que también dan una idea de cómo se alcanza la solución. Estos ténicas de resolución de problemas pueden ser fácilmente modificadas si el dominio del problema cambia.Para ser un buen solucionador de problemas y buen programador, debe seguir buenas técnicas de resolución de problemas. Una técnica de resolución de problemas común incluye analizar un problema, describir los requisitos del problema y diseñar pasos, llamado un algoritmo, para resolver el problema.  Algoritmo: Un proceso de resolución de problemas paso a paso en el que se llega a una solución en un tiempo finito.En el entorno de la programación, el proceso de resolución de problemas requiere los siguientes tres pasos:  Analizar y esbozar el problema y sus requisitos de solución, y diseño de un algoritmo para resolver el problema.  Implementar el algoritmo en un lenguaje de programación, tal como C++, y verificar que el algoritmo funciona.  Mantener el programa usándolo y modificándolo si el dominio del problema cambia.La figura 1-3 resume los dos primeros pasos del proceso de programación.Para desarrollar un programa para resolver un problema, empieza por analizar el problema. Luego diseñas el algoritmo, escribe las instrucciones del programa en un lenguaje de alto nivel (o codifica el programa) y entra al programa al sistema informático. Analizar el problema es el primer paso y el más importante. Este paso requiere que haga lo siguiente:  Entender completamente el problema.  Entender los requerimientos del problema. Los requerimientos puede incluir si el programa requiere interacción con el usuario, si manipula los datos, si produce resultados y cómo se ve el resultado. Si el programa manipula los datos, el programador debe saber cuáles son los datos y cómo están representados. Esto es, necesita mirar datos de muestra. Si el programa muestra una salida, debe saber cómo se deben generar y formatear los resultados.  Si el problema es complejo, divide el problema en subproblemas y repita los pasos 1 y 2. Esto es, para problemas complejos, necesita analizar cada subproblema y analizar los requisitos de cada uno de los subproblemas.Después que cuidadosamente analizó el problema, el siguiente paso es diseñar un algoritmo para resolver el problema. Si rompes el problema en subproblemas, necesitas diseñar un algoritmo para cada subproblema. Una vez que diseñó un algoritmo, necesita comprobar que sea correcto. A veces se puede probar la corrección de un algoritmo utilizando datos de muestra. En otras veces, es posible que necesite realizar algún análisis matemático para probar la exactitud del algoritmo.Una vez hayas diseñado el algoritmo y verificado su exactitud, el siguiente paso es convertirlo en un código de programación equivalente. A continuación, utiliza un editor de texto para ingresar el código programado o el programa en la computadora. Luego, asegúrese que el programa siga la sintaxis del lenguaje. Para verificar la exactitud de la sintaxis, corra el código mediante un compilador. Si el compilador genera mensajes de error, debe identificar los errores en el código, removerlos, y entonces correr el código mediante el compilador nuevamente. Cuando todos los errores de sintaxis fueron removidos, el compilador genera el código máquina equivalente. el enlazador enlaza el código máquina con los recursos del sistema, y el cargador coloca el programa en la memoria principal para que pueda ser ejecutado.El paso final es ejecutar el programa. El compilador garantiza que solo el programa siga la sintaxis del lenguaje. No garantiza que el programa se ejecutará correctamente. Durante la ejecución, el programa podría terminar anormalmente debido a errores lógicos, como la división por cero. Incluso si el programa termina normalmente, todavía puede generar resultados erróneos. Bajo estas circunstancias, es posible que tenga que volver a examinar el código, el algoritmo o incluso el análisis del problema.Su experiencia de programación en general será exitosa si dedica suficiente tiempo a completar el análisis del problema antes de intentar escribir las instrucciones de programación. Usualmente, haga este trabajo en papel con un bolígrafo o un lápiz. Tomando este enfoque cuidadoso de la programación tiene varias ventajas. Es mucho más fácil encontrar errores en un programa que está bien analizado y bien diseñado. Además, un programa cuidadosamente analizado y diseñado es mucho más fácil de seguir y modificar. Incluso los programadores más expertos pasan un cantidad considerable de tiempo analizando un problema y diseñando un algoritmo.A lo largo de este libro, no solo aprenderá las reglas de escribir programas en C++, sino que también aprenderá técnicas de resolución de problemas. La mayoría de los capítulos contienen ejemplos de programación que tratan problemas de programación. Estos problemas de programación enseñan técnicas de cómo analizar y resolver problemas, diseñar algoritmos, codificar los algoritmos en C++, y también ayudar a entender los conceptos discutidos en el capítulo. Para obtener el máximo beneficio de este libro, le recomendamos que analice estos ejemplos de programación.Metodologías de programación Dos enfoques populares para el diseño de programación son el enfoque estructurado y el enfoque orientado a objetos, que se describen a continuación.Programación estructurada Dividir un problema en subproblemas más pequeños se llama diseño estructurado. Luego se analiza cada subproblema y se obtiene una solución para resolver el subproblema. Las soluciones a todos los subproblemas se combinan para resolver el problema general. Este proceso de implementación de un diseño estructurado se denomina programación estructurada. El enfoque de diseño estructurado también se conoce como diseño descendente, diseño ascendente, refinamiento por pasos y programación modular.Programación orientada a objetos Diseño orientado a objetos (ODD) es una metodología de programación muy utilizada. En ODD, el primer paso en la resolución de problemas es identificar los componentes llamados objetos, que forman la base de la solución, y para determinar cómo estos objetos interactúan entre sí. Por ejemplo, suponga que desea escribir un programa que automatice el proceso de alquiler de DVD para una tienda de DVD local. Los dos objetos principales en este problema son el DVD y el cliente.Después de identificar los objetos, el siguiente paso es especificar para cada objeto los datos relevantes y las posibles operaciones a realizar en esos datos. Por ejemplo, para un objeto de DVD, la data pueden incluir:  nombre de la película  año de lanzamiento  productor  compañía de producción  número de copias en stockAlgunas de las operaciones en un objeto dvd podría incluir:  verificando el nombre de la película  reduciendo el número de copias en stock en una luego que se alquila una copia.  incrementando el número de copias en stock por unidad después de un cliente devuelve un DVD particular.Esto ilustra que cada objeto consiste de datos y operaciones en los datos en una sola unidad. Un objeto combina datos y operaciones en los datos en una sola unidad. En ODD, el programa final es una colección de objetos que interactúan. Un lenguaje de programación que implementa ODD se denomina lenguaje de programación orientado a objetos (OPP). Aprenderá acerca de las muchas ventajas de ODD en capítulos posteriores.Porque un objeto consiste en datos y operaciones en esos datos, antes de que pueda diseñar y usar objetos, necesita aprender cómo representar los datos en la memoria de la computadora, cómo manipular los datos y cómo implementar operaciones. En el capítulo 2, aprenderá los tipos de datos básicos de C++ y descubrirá cómo representar y manipular los datos en la memoria de la computadora. El capítulo 3 explica cómo ingresar datos en un programa C++ y generar los resultados generados por un programa C++.Para crear operaciones, escriba algoritmos e implemente en un lenguaje de programación. Debido a que el elemento de datos en un programa complejo generalmente tiene muchas operaciones, para separar las operaciones entre sí y para usarlas de manera efectiva y conveniente, se usan funciones para implementar algoritmos. después de una breve introducción en el Capítulo 2 y 3, aprenderá los detalles de las funciones en el Capítulo 6.Ciertos algoritmos requieren que un programa tome decisiones, un proceso llamado selección. Otros algoritmos pueden requerir que ciertas declaraciones se repitan hasta que se cumplan ciertas condiciones, un proceso llamado repetición. Otros algoritmos requieren selección y repetición. Aprenderá sobre los mecanismos de selección y repetición, llamados estructuras de control en los capítulos 4 y 5. También, en el capítulo 8, utilizando un mecanismo llamado arreglo, aprenderá cómo manipular los datos cuando los elementos de datos son del mismo tipo, como los artículos en una lista de cifras de ventas.Finalmente, para trabajar con objetos, necesita saber cómo combinar datos y operaciones en los datos en una sola unidad. En C++, el mecanismo que le permite combinar datos y operaciones en los datos en una sola unidad se llama clase. aprenderá cómo funcionan las clases, cómo trabajar con clases y cómo crear clases en el capítulo Clases y la abstracción de datos (más adelante en este libro).Como puede ver, necesita aprender algunas cosas antes de trabajar con la metodología OOD. Para hacer este aprendizaje más fácil y efectivo, este libro divide a propósito las estructuras de control en dos capítulos. (Capítulo 4–Selección; Capítulo 5–Repetición).Para algunos problemas, el enfoque estructurado del diseño del programa será muy efectivo. Otros problemas serán mejor tratados por ODD. Por ejemplo, si un problema requiere manipular conjuntos de números con funciones matemáticas, puede usar el enfoque de diseño estructurado y describir los pasos necesarios para obtener la solución. La biblioteca de C++ proporciona una gran cantidad de funciones que puede usar de manera efectiva para manipular números. Por otro lado, si desea escribir un programa que haga que una máquina de jugo funcione, el enfoque ODD es más efectivo. C++ fue diseñado especialmente para implementar ODD. Además, ODD funciona bien con diseño estructurado. Tanto el enfoque estructurado como el ODD requieren que domines los componentes básicos de un lenguaje de programación para ser un programador eficaz. En los capítulos 2 al 8, aprenderá los componentes básicos de C++, tales como tipos de datos, entrada/salida, estructuras de control, funciones definidas por el usuario y arreglos, requeridas por cualquier tipo de programación. Desarrollamos e ilustramos cómo funcionan estos conceptos utilizando el enfoque de programación estructurada. A partir del capítulo Clases y abstracción de datos, desarrollamos y utilizamos el enfoque ODD.Norma ANSI/ISO C++ El lenguaje de programación C++ evolucionó de C y fue diseñado por Bjarne Stroustrup en los Laboratorios Bell a principios de los años ochenta. Desde principios de la década de 1980 hasta principios de la de 1990, varios compiladores C++ estaban disponibles. A pesar de que las características fundamentales de C++ en todos los compiladores eran en su mayoría las mismas, el lenguaje C++ estaba evolucionando de formas ligeramente diferentes en compiladores diferentes. Como consecuencia, los programas C++ no siempre eran portátiles de un compilador a otro.Para abordar este problema, a principios de la década de 1990, se estableció un comité conjunto del Instituto Nacional Estadounidense de Estándares (ANSI) y la Organización Internacional de Normalización (ISO) para estandarizar la sintaxis de C++. A mediados de 1998, se aprobaron los estándares del lenguaje ANSI/ISO C++ fueron aprobados. La mayoría de los compiladores de hoy cumplen con estos nuevos estándares. En los últimos años, el comité C++ se reunió varias veces para estandarizar aún más la sintaxis de C++. En el 2011, el segundo estándar de C++ se aprobó. El principal objetivo de este estándar, denominado C++11, es hacer que el código C++ sea más limpio y más efectivo. Por ejemplo, el nuevo estándar introduce el tipo de dato long long para tratar con enteros grandes, la declaración automática de variables usando sentencias de inicialización, mejorando la funcionalidad de los bucles for para que funcionen efectivamente con arrays y contenedores, y nuevos algoritmos. Algunas de estas nuevas características de C++ se presentan en este libro. C++14, que es una actualización sobre C++11 fue aprobada en el 2014.Este libro se centra en la última sintaxis de C++ aprobada por ANSI/ISO, conocida como Norma ANSI/ISO C++.Repaso rápido   Una computadora es un dispositivo electrónico capaz de realizar operaciones aritméticas y lógicas.  Un sistema de computadoras tiene dos componentes: hardware y software.  La unidad central de procesamiento (CPU) y la memoria principal son ejemplos de componentes de hardware.  Todos los programas deben llevarse a la memoria principal antes de que puedan ejecutarse.  Cuando se apaga la alimentación, todo lo que hay en la memoria principal se pierde.  El almacenamiento secundario proporciona almacenamiento permanente para la información. Los discos duros, las unidades flash y los CD-ROM son ejemplos de almacenamiento secundario.  La entrada a la computadora se realiza a través de un dispositivo de entrada. Dos dispositivos de entrada comunes son el teclado y el mouse.  La computadora envía su salida a un dispositivo de salida, como la pantalla de la computadora o una impresora.  Los programas son programas ejecutados por la computadora.  El sistema operativo maneja la actividad general de la computadora y presta servicios.  El lenguaje más básico de una computadora es una secuencia de 0s y 1s llamada lenguaje de máquina. Cada computadora entiende directamente su propio lenguaje de máquina.  Un bit es un dígito binario, 0 o 1.  Un byte es una secuencia de ocho bits.  Una secuencia de 0s y 1s se denomina código binario o número binario.  Un kilobyte (KB) es  bytes, un megabyte (MB) es  bytes, un gigabyte (GB) es  bytes, un terabyte (TB) es  bytes, un petabyte (PB) es  bytes, un exabyte (EB) es  bytes; y un zettabyte (ZB) es  bytes.  El lenguaje ensamblador usa instrucciones fáciles de recordar llamadas mnemónicas.  Los ensambladores son programas que traducen un programa escrito en ensamblaje.lenguaje en lenguaje de máquina.  Los compiladores son programas que traducen un programa escrito en un lenguaje de alto nivel en código de máquina, llamado código objeto.  Un enlazador vincula el código objeto con otros programas proporcionados por el entorno de desarrollo integrado (IDE) y se utiliza en el programa para producir código ejecutable.  Por lo general, se necesitan seis pasos para ejecutar un programa C++: editar, preprocesar, compilar, vincular, cargar y ejecutar.  Un cargador transfiere el código ejecutable a la memoria principal.  Un algoritmo es un proceso paso a paso de resolución de problemas en el que una solución es alcanzada en una cantidad de tiempo finito.  El proceso de resolución de problemas tiene tres pasos: analizar el problema y diseñar un algoritmo, implementar el algoritmo en un lenguaje de programación y mantener el programa.  En el diseño estructurado, un problema se divide en subproblemas más pequeños. Cada subproblema es resuelto, y las soluciones a todos los subproblemas se combinan para resolver el problema.  En el diseño orientado a objetos (OOD), un programa es una colección de objetos que interactúan.  Un objeto consiste en datos y operaciones en esos datos.  La sintaxis C++ de la norma ANSI/ISO se aprobó a mediados de 1998.  La segunda norma de C++, C++11, fue aprobada en 2011. C++14 fue aprobado en 2014."
}, 

{
"id": "-cpp-2018-02-09-functions",
"title": "User-Defined Functions",
"author": null,
"tags": ["hello-world", "good-practics"],
"url": "/cpp/2018/02/09/functions/",
"date": "2018-02-09",
"content": "En este capítulo, aprenderásEn el Capítulo 2, aprendiste que un programa en C++ es una colección de funciones. Uno como la función main. Los programas en los Capítulos 1 hasta el Capítulo 5 usa solo la función main; las instrucciones de programación son comprimidos dentro de una función. Esta técnica, sin embargo, es buena solo para programas cortos. Para programas largos, esto no es práctico (a pesar de que es posible) de colocar las instrucciones de programación enteras. Debes aprender a romper el problema dentro piezas manejables. Este capítulo primero discute las funciones previamente definidas y entonces discute las funciones definidas por el usuario.Imagine un fábrica de automóviles. Cuando se fabrica un automóvil, no está hecho de materias primas básicas; se pone a partir de piezas fabricadas anteriormente. Algunas partes están hechas por la propia empresa; otros, por diferentes empresas.Las funciones son como bloques de construcción. Te permiten dividir programas complicados en piezas manejables. Ellos tiene otras ventajas, también:  Cuando trabaje con una función, puede enfocarse en solo la parte del programa y construirlo, depurarlo y perfeccionarlo.  Diferentes personas pueden trabajar en diferentes funciones simultáneamente.      Si necesita una función, puede escribirla en más de una vez y colocarla en muchos programas.    Usando funciones en gran medida mejora la legibilidad porque reduce la complejidad de la función main.Las funciones son frecuentemente llamados módulos. Elos son como programas miniatura; puede ponerlo juntos para formar un programa grande. Cuando las funciones definidas por el usuario son discutidas, verás que este es el caso. Esta habilidad es menos aparente con las funciones predefinidas porque su código de programación no está disponible para nosotros. Sin embargo, las funciones predefinidas son también escritas para nosotros, aprenderás primero que puede usar estas cuando las necesite.Funciones predefinidasAntes de discutir formalmente las funciones predefinidas en C++, permítanos revisar el concepto de un curso de álgebra escolar. En álgebra, una función es considerada una regla o correspondencia entre valores, llamados los argumnetos de la función, y los valores son únicos de la función asociado con los argumentos. Así, si , entonces , Capitulo 6Funciones definidas por el usuario15 ejercicios de teoria10 ejercicios de práctica"
}

]